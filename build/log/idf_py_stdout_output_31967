[1/10] Performing build step for 'bootloader'
[1/1] cd /home/pedro/Pessoal/code/UTFPR/TCC/seebum_embedded/build/bootloader/esp-idf/esptool_py && /home/pedro/.espressif/python_env/idf5.3_py3.10_env/bin/python /home/pedro/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 /home/pedro/Pessoal/code/UTFPR/TCC/seebum_embedded/build/bootloader/bootloader.bin
Bootloader binary size 0x5230 bytes. 0x2dd0 bytes (36%) free.
[2/10] No install step for 'bootloader'
[3/10] Completed 'bootloader'
[4/10] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/seebum_embedded.c.obj
[5/10] Linking C static library esp-idf/main/libmain.a
[6/10] Generating ld/sections.ld
[7/10] Linking CXX executable seebum_embedded.elf
[8/10] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated /home/pedro/Pessoal/code/UTFPR/TCC/seebum_embedded/build/seebum_embedded.bin
[9/10] cd /home/pedro/Pessoal/code/UTFPR/TCC/seebum_embedded/build/esp-idf/esptool_py && /home/pedro/.espressif/python_env/idf5.3_py3.10_env/bin/python /home/pedro/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/pedro/Pessoal/code/UTFPR/TCC/seebum_embedded/build/partition_table/partition-table.bin /home/pedro/Pessoal/code/UTFPR/TCC/seebum_embedded/build/seebum_embedded.bin
seebum_embedded.bin binary size 0x35c20 bytes. Smallest app partition is 0x100000 bytes. 0xca3e0 bytes (79%) free.
[9/10] cd /home/pedro/esp/esp-idf/components/esptool_py && /home/pedro/.asdf/installs/python/3.10.12/lib/python3.10/site-packages/cmake/data/bin/cmake -D IDF_PATH=/home/pedro/esp/esp-idf -D "SERIAL_TOOL=/home/pedro/.espressif/python_env/idf5.3_py3.10_env/bin/python;;/home/pedro/esp/esp-idf/components/esptool_py/esptool/esptool.py;--chip;esp32s3" -D "SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args" -D WORKING_DIRECTORY=/home/pedro/Pessoal/code/UTFPR/TCC/seebum_embedded/build -P /home/pedro/esp/esp-idf/components/esptool_py/run_serial_tool.cmake
esptool.py --chip esp32s3 -p /dev/ttyACM0 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 80m --flash_size 2MB 0x0 bootloader/bootloader.bin 0x10000 seebum_embedded.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.0
Serial port /dev/ttyACM0
Connecting....
Chip is ESP32-S3 (QFN56) (revision v0.2)
Features: WiFi, BLE, Embedded PSRAM 8MB (AP_3v3)
Crystal is 40MHz
MAC: 3c:84:27:cc:42:24
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00000000 to 0x00005fff...
Flash will be erased from 0x00010000 to 0x00045fff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 21040 bytes to 13056...
Writing at 0x00000000... (100 %)
Wrote 21040 bytes (13056 compressed) at 0x00000000 in 0.3 seconds (effective 591.9 kbit/s)...
Hash of data verified.
Compressed 220192 bytes to 111345...
Writing at 0x00010000... (14 %)
Writing at 0x0001e6e4... (28 %)
Writing at 0x00025258... (42 %)
Writing at 0x0002b5d7... (57 %)
Writing at 0x0003304c... (71 %)
Writing at 0x0003a418... (85 %)
Writing at 0x0004068c... (100 %)
Wrote 220192 bytes (111345 compressed) at 0x00010000 in 1.6 seconds (effective 1116.4 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.0 seconds (effective 720.9 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
